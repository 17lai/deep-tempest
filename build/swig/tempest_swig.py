# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tempest_swig
else:
    import _tempest_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _tempest_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _tempest_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _tempest_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _tempest_swig.high_res_timer_epoch()
class sampling_synchronization(object):
    r"""Proxy of C++ gr::tempest::sampling_synchronization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", manual_correction: "double") -> "gr::tempest::sampling_synchronization::sptr":
        r"""make(int Htotal, double manual_correction) -> sampling_synchronization_sptr"""
        return _tempest_swig.sampling_synchronization_make(Htotal, manual_correction)

    def set_Htotal(self, Htotal: "int") -> "void":
        r"""set_Htotal(sampling_synchronization self, int Htotal)"""
        return _tempest_swig.sampling_synchronization_set_Htotal(self, Htotal)

    def set_manual_correction(self, correction: "double") -> "void":
        r"""set_manual_correction(sampling_synchronization self, double correction)"""
        return _tempest_swig.sampling_synchronization_set_manual_correction(self, correction)
    __swig_destroy__ = _tempest_swig.delete_sampling_synchronization

# Register sampling_synchronization in _tempest_swig:
_tempest_swig.sampling_synchronization_swigregister(sampling_synchronization)

def sampling_synchronization_make(Htotal: "int", manual_correction: "double") -> "gr::tempest::sampling_synchronization::sptr":
    r"""sampling_synchronization_make(int Htotal, double manual_correction) -> sampling_synchronization_sptr"""
    return _tempest_swig.sampling_synchronization_make(Htotal, manual_correction)

class sampling_synchronization_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::sampling_synchronization > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sampling_synchronization_sptr self) -> sampling_synchronization_sptr
        __init__(sampling_synchronization_sptr self, sampling_synchronization p) -> sampling_synchronization_sptr
        """
        _tempest_swig.sampling_synchronization_sptr_swiginit(self, _tempest_swig.new_sampling_synchronization_sptr(*args))

    def __deref__(self) -> "gr::tempest::sampling_synchronization *":
        r"""__deref__(sampling_synchronization_sptr self) -> sampling_synchronization"""
        return _tempest_swig.sampling_synchronization_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_sampling_synchronization_sptr

    def make(self, Htotal: "int", manual_correction: "double") -> "gr::tempest::sampling_synchronization::sptr":
        r"""make(sampling_synchronization_sptr self, int Htotal, double manual_correction) -> sampling_synchronization_sptr"""
        return _tempest_swig.sampling_synchronization_sptr_make(self, Htotal, manual_correction)

    def set_Htotal(self, Htotal: "int") -> "void":
        r"""set_Htotal(sampling_synchronization_sptr self, int Htotal)"""
        return _tempest_swig.sampling_synchronization_sptr_set_Htotal(self, Htotal)

    def set_manual_correction(self, correction: "double") -> "void":
        r"""set_manual_correction(sampling_synchronization_sptr self, double correction)"""
        return _tempest_swig.sampling_synchronization_sptr_set_manual_correction(self, correction)

    def history(self) -> "unsigned int":
        r"""history(sampling_synchronization_sptr self) -> unsigned int"""
        return _tempest_swig.sampling_synchronization_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(sampling_synchronization_sptr self, int which, int delay)
        declare_sample_delay(sampling_synchronization_sptr self, unsigned int delay)
        """
        return _tempest_swig.sampling_synchronization_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(sampling_synchronization_sptr self, int which) -> unsigned int"""
        return _tempest_swig.sampling_synchronization_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(sampling_synchronization_sptr self, int multiple)"""
        return _tempest_swig.sampling_synchronization_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(sampling_synchronization_sptr self) -> double"""
        return _tempest_swig.sampling_synchronization_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(sampling_synchronization_sptr self) -> uint64_t"""
        return _tempest_swig.sampling_synchronization_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(sampling_synchronization_sptr self) -> uint64_t"""
        return _tempest_swig.sampling_synchronization_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.sampling_synchronization_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.sampling_synchronization_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(sampling_synchronization_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.sampling_synchronization_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(sampling_synchronization_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.sampling_synchronization_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(sampling_synchronization_sptr self, std::string level)"""
        return _tempest_swig.sampling_synchronization_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.sampling_synchronization_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(sampling_synchronization_sptr self, int m)"""
        return _tempest_swig.sampling_synchronization_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(sampling_synchronization_sptr self)"""
        return _tempest_swig.sampling_synchronization_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.sampling_synchronization_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(sampling_synchronization_sptr self, int m)"""
        return _tempest_swig.sampling_synchronization_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(sampling_synchronization_sptr self, int i) -> long"""
        return _tempest_swig.sampling_synchronization_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(sampling_synchronization_sptr self, long max_output_buffer)
        set_max_output_buffer(sampling_synchronization_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.sampling_synchronization_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(sampling_synchronization_sptr self, int i) -> long"""
        return _tempest_swig.sampling_synchronization_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(sampling_synchronization_sptr self, long min_output_buffer)
        set_min_output_buffer(sampling_synchronization_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.sampling_synchronization_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_avg(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_var(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_avg(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_var(sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sampling_synchronization_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.sampling_synchronization_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(sampling_synchronization_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.sampling_synchronization_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(sampling_synchronization_sptr self)"""
        return _tempest_swig.sampling_synchronization_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(sampling_synchronization_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.sampling_synchronization_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(sampling_synchronization_sptr self, int priority) -> int"""
        return _tempest_swig.sampling_synchronization_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.sampling_synchronization_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.sampling_synchronization_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(sampling_synchronization_sptr self) -> io_signature_sptr"""
        return _tempest_swig.sampling_synchronization_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(sampling_synchronization_sptr self) -> io_signature_sptr"""
        return _tempest_swig.sampling_synchronization_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(sampling_synchronization_sptr self) -> long"""
        return _tempest_swig.sampling_synchronization_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(sampling_synchronization_sptr self) -> basic_block_sptr"""
        return _tempest_swig.sampling_synchronization_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(sampling_synchronization_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.sampling_synchronization_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.sampling_synchronization_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(sampling_synchronization_sptr self, std::string name)"""
        return _tempest_swig.sampling_synchronization_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(sampling_synchronization_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.sampling_synchronization_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(sampling_synchronization_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.sampling_synchronization_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(sampling_synchronization_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.sampling_synchronization_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(sampling_synchronization_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.sampling_synchronization_sptr_message_subscribers(self, which_port)

# Register sampling_synchronization_sptr in _tempest_swig:
_tempest_swig.sampling_synchronization_sptr_swigregister(sampling_synchronization_sptr)


sampling_synchronization_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sampling_synchronization = sampling_synchronization.make;

class framing(object):
    r"""Proxy of C++ gr::tempest::framing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", Vtotal: "int", Hdisplay: "int", Vdisplay: "int") -> "gr::tempest::framing::sptr":
        r"""make(int Htotal, int Vtotal, int Hdisplay, int Vdisplay) -> framing_sptr"""
        return _tempest_swig.framing_make(Htotal, Vtotal, Hdisplay, Vdisplay)

    def set_Htotal_and_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_and_Vtotal(framing self, int Htotal, int Vtotal)"""
        return _tempest_swig.framing_set_Htotal_and_Vtotal(self, Htotal, Vtotal)
    __swig_destroy__ = _tempest_swig.delete_framing

# Register framing in _tempest_swig:
_tempest_swig.framing_swigregister(framing)

def framing_make(Htotal: "int", Vtotal: "int", Hdisplay: "int", Vdisplay: "int") -> "gr::tempest::framing::sptr":
    r"""framing_make(int Htotal, int Vtotal, int Hdisplay, int Vdisplay) -> framing_sptr"""
    return _tempest_swig.framing_make(Htotal, Vtotal, Hdisplay, Vdisplay)

class framing_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::framing > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(framing_sptr self) -> framing_sptr
        __init__(framing_sptr self, framing p) -> framing_sptr
        """
        _tempest_swig.framing_sptr_swiginit(self, _tempest_swig.new_framing_sptr(*args))

    def __deref__(self) -> "gr::tempest::framing *":
        r"""__deref__(framing_sptr self) -> framing"""
        return _tempest_swig.framing_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_framing_sptr

    def make(self, Htotal: "int", Vtotal: "int", Hdisplay: "int", Vdisplay: "int") -> "gr::tempest::framing::sptr":
        r"""make(framing_sptr self, int Htotal, int Vtotal, int Hdisplay, int Vdisplay) -> framing_sptr"""
        return _tempest_swig.framing_sptr_make(self, Htotal, Vtotal, Hdisplay, Vdisplay)

    def set_Htotal_and_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_and_Vtotal(framing_sptr self, int Htotal, int Vtotal)"""
        return _tempest_swig.framing_sptr_set_Htotal_and_Vtotal(self, Htotal, Vtotal)

    def history(self) -> "unsigned int":
        r"""history(framing_sptr self) -> unsigned int"""
        return _tempest_swig.framing_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(framing_sptr self, int which, int delay)
        declare_sample_delay(framing_sptr self, unsigned int delay)
        """
        return _tempest_swig.framing_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(framing_sptr self, int which) -> unsigned int"""
        return _tempest_swig.framing_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(framing_sptr self, int multiple)"""
        return _tempest_swig.framing_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(framing_sptr self) -> int"""
        return _tempest_swig.framing_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(framing_sptr self) -> double"""
        return _tempest_swig.framing_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(framing_sptr self) -> uint64_t"""
        return _tempest_swig.framing_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(framing_sptr self) -> uint64_t"""
        return _tempest_swig.framing_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(framing_sptr self) -> bool"""
        return _tempest_swig.framing_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(framing_sptr self) -> bool"""
        return _tempest_swig.framing_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(framing_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.framing_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(framing_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.framing_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(framing_sptr self, std::string level)"""
        return _tempest_swig.framing_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(framing_sptr self) -> std::string"""
        return _tempest_swig.framing_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(framing_sptr self) -> int"""
        return _tempest_swig.framing_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(framing_sptr self, int m)"""
        return _tempest_swig.framing_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(framing_sptr self)"""
        return _tempest_swig.framing_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(framing_sptr self) -> bool"""
        return _tempest_swig.framing_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(framing_sptr self, int m)"""
        return _tempest_swig.framing_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(framing_sptr self) -> int"""
        return _tempest_swig.framing_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(framing_sptr self, int i) -> long"""
        return _tempest_swig.framing_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(framing_sptr self, long max_output_buffer)
        set_max_output_buffer(framing_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.framing_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(framing_sptr self, int i) -> long"""
        return _tempest_swig.framing_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(framing_sptr self, long min_output_buffer)
        set_min_output_buffer(framing_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.framing_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(framing_sptr self, int which) -> float
        pc_input_buffers_full(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(framing_sptr self, int which) -> float
        pc_input_buffers_full_avg(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(framing_sptr self, int which) -> float
        pc_input_buffers_full_var(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(framing_sptr self, int which) -> float
        pc_output_buffers_full(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(framing_sptr self, int which) -> float
        pc_output_buffers_full_avg(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(framing_sptr self, int which) -> float
        pc_output_buffers_full_var(framing_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.framing_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(framing_sptr self) -> float"""
        return _tempest_swig.framing_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(framing_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.framing_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(framing_sptr self)"""
        return _tempest_swig.framing_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(framing_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.framing_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(framing_sptr self) -> int"""
        return _tempest_swig.framing_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(framing_sptr self) -> int"""
        return _tempest_swig.framing_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(framing_sptr self, int priority) -> int"""
        return _tempest_swig.framing_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(framing_sptr self) -> std::string"""
        return _tempest_swig.framing_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(framing_sptr self) -> std::string"""
        return _tempest_swig.framing_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(framing_sptr self) -> io_signature_sptr"""
        return _tempest_swig.framing_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(framing_sptr self) -> io_signature_sptr"""
        return _tempest_swig.framing_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(framing_sptr self) -> long"""
        return _tempest_swig.framing_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(framing_sptr self) -> basic_block_sptr"""
        return _tempest_swig.framing_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(framing_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.framing_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(framing_sptr self) -> std::string"""
        return _tempest_swig.framing_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(framing_sptr self, std::string name)"""
        return _tempest_swig.framing_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(framing_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.framing_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(framing_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.framing_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(framing_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.framing_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(framing_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.framing_sptr_message_subscribers(self, which_port)

# Register framing_sptr in _tempest_swig:
_tempest_swig.framing_sptr_swigregister(framing_sptr)


framing_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
framing = framing.make;

class Hsync(object):
    r"""Proxy of C++ gr::tempest::Hsync class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", delay: "int") -> "gr::tempest::Hsync::sptr":
        r"""make(int Htotal, int delay) -> Hsync_sptr"""
        return _tempest_swig.Hsync_make(Htotal, delay)

    def set_Htotal_and_delay(self, Htotal: "int", delay: "int") -> "void":
        r"""set_Htotal_and_delay(Hsync self, int Htotal, int delay)"""
        return _tempest_swig.Hsync_set_Htotal_and_delay(self, Htotal, delay)
    __swig_destroy__ = _tempest_swig.delete_Hsync

# Register Hsync in _tempest_swig:
_tempest_swig.Hsync_swigregister(Hsync)

def Hsync_make(Htotal: "int", delay: "int") -> "gr::tempest::Hsync::sptr":
    r"""Hsync_make(int Htotal, int delay) -> Hsync_sptr"""
    return _tempest_swig.Hsync_make(Htotal, delay)

class Hsync_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::Hsync > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Hsync_sptr self) -> Hsync_sptr
        __init__(Hsync_sptr self, Hsync p) -> Hsync_sptr
        """
        _tempest_swig.Hsync_sptr_swiginit(self, _tempest_swig.new_Hsync_sptr(*args))

    def __deref__(self) -> "gr::tempest::Hsync *":
        r"""__deref__(Hsync_sptr self) -> Hsync"""
        return _tempest_swig.Hsync_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_Hsync_sptr

    def make(self, Htotal: "int", delay: "int") -> "gr::tempest::Hsync::sptr":
        r"""make(Hsync_sptr self, int Htotal, int delay) -> Hsync_sptr"""
        return _tempest_swig.Hsync_sptr_make(self, Htotal, delay)

    def set_Htotal_and_delay(self, Htotal: "int", delay: "int") -> "void":
        r"""set_Htotal_and_delay(Hsync_sptr self, int Htotal, int delay)"""
        return _tempest_swig.Hsync_sptr_set_Htotal_and_delay(self, Htotal, delay)

    def history(self) -> "unsigned int":
        r"""history(Hsync_sptr self) -> unsigned int"""
        return _tempest_swig.Hsync_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(Hsync_sptr self, int which, int delay)
        declare_sample_delay(Hsync_sptr self, unsigned int delay)
        """
        return _tempest_swig.Hsync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(Hsync_sptr self, int which) -> unsigned int"""
        return _tempest_swig.Hsync_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(Hsync_sptr self, int multiple)"""
        return _tempest_swig.Hsync_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(Hsync_sptr self) -> int"""
        return _tempest_swig.Hsync_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(Hsync_sptr self) -> double"""
        return _tempest_swig.Hsync_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(Hsync_sptr self) -> uint64_t"""
        return _tempest_swig.Hsync_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(Hsync_sptr self) -> uint64_t"""
        return _tempest_swig.Hsync_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(Hsync_sptr self) -> bool"""
        return _tempest_swig.Hsync_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(Hsync_sptr self) -> bool"""
        return _tempest_swig.Hsync_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(Hsync_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.Hsync_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(Hsync_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.Hsync_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(Hsync_sptr self, std::string level)"""
        return _tempest_swig.Hsync_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(Hsync_sptr self) -> std::string"""
        return _tempest_swig.Hsync_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(Hsync_sptr self) -> int"""
        return _tempest_swig.Hsync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(Hsync_sptr self, int m)"""
        return _tempest_swig.Hsync_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(Hsync_sptr self)"""
        return _tempest_swig.Hsync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(Hsync_sptr self) -> bool"""
        return _tempest_swig.Hsync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(Hsync_sptr self, int m)"""
        return _tempest_swig.Hsync_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(Hsync_sptr self) -> int"""
        return _tempest_swig.Hsync_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(Hsync_sptr self, int i) -> long"""
        return _tempest_swig.Hsync_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(Hsync_sptr self, long max_output_buffer)
        set_max_output_buffer(Hsync_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.Hsync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(Hsync_sptr self, int i) -> long"""
        return _tempest_swig.Hsync_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(Hsync_sptr self, long min_output_buffer)
        set_min_output_buffer(Hsync_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.Hsync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(Hsync_sptr self, int which) -> float
        pc_input_buffers_full(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(Hsync_sptr self, int which) -> float
        pc_input_buffers_full_avg(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(Hsync_sptr self, int which) -> float
        pc_input_buffers_full_var(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(Hsync_sptr self, int which) -> float
        pc_output_buffers_full(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(Hsync_sptr self, int which) -> float
        pc_output_buffers_full_avg(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(Hsync_sptr self, int which) -> float
        pc_output_buffers_full_var(Hsync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.Hsync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(Hsync_sptr self) -> float"""
        return _tempest_swig.Hsync_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(Hsync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.Hsync_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(Hsync_sptr self)"""
        return _tempest_swig.Hsync_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(Hsync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.Hsync_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(Hsync_sptr self) -> int"""
        return _tempest_swig.Hsync_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(Hsync_sptr self) -> int"""
        return _tempest_swig.Hsync_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(Hsync_sptr self, int priority) -> int"""
        return _tempest_swig.Hsync_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(Hsync_sptr self) -> std::string"""
        return _tempest_swig.Hsync_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(Hsync_sptr self) -> std::string"""
        return _tempest_swig.Hsync_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(Hsync_sptr self) -> io_signature_sptr"""
        return _tempest_swig.Hsync_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(Hsync_sptr self) -> io_signature_sptr"""
        return _tempest_swig.Hsync_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(Hsync_sptr self) -> long"""
        return _tempest_swig.Hsync_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(Hsync_sptr self) -> basic_block_sptr"""
        return _tempest_swig.Hsync_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(Hsync_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.Hsync_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(Hsync_sptr self) -> std::string"""
        return _tempest_swig.Hsync_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(Hsync_sptr self, std::string name)"""
        return _tempest_swig.Hsync_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(Hsync_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.Hsync_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(Hsync_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.Hsync_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(Hsync_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.Hsync_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(Hsync_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.Hsync_sptr_message_subscribers(self, which_port)

# Register Hsync_sptr in _tempest_swig:
_tempest_swig.Hsync_sptr_swigregister(Hsync_sptr)


Hsync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Hsync = Hsync.make;

class normalize_flow(object):
    r"""Proxy of C++ gr::tempest::normalize_flow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(min: "float", max: "float", window: "int", alpha_avg: "float", update_proba: "float") -> "gr::tempest::normalize_flow::sptr":
        r"""make(float min, float max, int window, float alpha_avg, float update_proba) -> normalize_flow_sptr"""
        return _tempest_swig.normalize_flow_make(min, max, window, alpha_avg, update_proba)

    def set_min_max(self, min: "float", max: "float") -> "void":
        r"""set_min_max(normalize_flow self, float min, float max)"""
        return _tempest_swig.normalize_flow_set_min_max(self, min, max)
    __swig_destroy__ = _tempest_swig.delete_normalize_flow

# Register normalize_flow in _tempest_swig:
_tempest_swig.normalize_flow_swigregister(normalize_flow)

def normalize_flow_make(min: "float", max: "float", window: "int", alpha_avg: "float", update_proba: "float") -> "gr::tempest::normalize_flow::sptr":
    r"""normalize_flow_make(float min, float max, int window, float alpha_avg, float update_proba) -> normalize_flow_sptr"""
    return _tempest_swig.normalize_flow_make(min, max, window, alpha_avg, update_proba)

class normalize_flow_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::normalize_flow > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(normalize_flow_sptr self) -> normalize_flow_sptr
        __init__(normalize_flow_sptr self, normalize_flow p) -> normalize_flow_sptr
        """
        _tempest_swig.normalize_flow_sptr_swiginit(self, _tempest_swig.new_normalize_flow_sptr(*args))

    def __deref__(self) -> "gr::tempest::normalize_flow *":
        r"""__deref__(normalize_flow_sptr self) -> normalize_flow"""
        return _tempest_swig.normalize_flow_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_normalize_flow_sptr

    def make(self, min: "float", max: "float", window: "int", alpha_avg: "float", update_proba: "float") -> "gr::tempest::normalize_flow::sptr":
        r"""make(normalize_flow_sptr self, float min, float max, int window, float alpha_avg, float update_proba) -> normalize_flow_sptr"""
        return _tempest_swig.normalize_flow_sptr_make(self, min, max, window, alpha_avg, update_proba)

    def set_min_max(self, min: "float", max: "float") -> "void":
        r"""set_min_max(normalize_flow_sptr self, float min, float max)"""
        return _tempest_swig.normalize_flow_sptr_set_min_max(self, min, max)

    def history(self) -> "unsigned int":
        r"""history(normalize_flow_sptr self) -> unsigned int"""
        return _tempest_swig.normalize_flow_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(normalize_flow_sptr self, int which, int delay)
        declare_sample_delay(normalize_flow_sptr self, unsigned int delay)
        """
        return _tempest_swig.normalize_flow_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(normalize_flow_sptr self, int which) -> unsigned int"""
        return _tempest_swig.normalize_flow_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(normalize_flow_sptr self, int multiple)"""
        return _tempest_swig.normalize_flow_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(normalize_flow_sptr self) -> int"""
        return _tempest_swig.normalize_flow_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(normalize_flow_sptr self) -> double"""
        return _tempest_swig.normalize_flow_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(normalize_flow_sptr self) -> uint64_t"""
        return _tempest_swig.normalize_flow_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(normalize_flow_sptr self) -> uint64_t"""
        return _tempest_swig.normalize_flow_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(normalize_flow_sptr self) -> bool"""
        return _tempest_swig.normalize_flow_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(normalize_flow_sptr self) -> bool"""
        return _tempest_swig.normalize_flow_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(normalize_flow_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.normalize_flow_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(normalize_flow_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.normalize_flow_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(normalize_flow_sptr self, std::string level)"""
        return _tempest_swig.normalize_flow_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(normalize_flow_sptr self) -> std::string"""
        return _tempest_swig.normalize_flow_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(normalize_flow_sptr self) -> int"""
        return _tempest_swig.normalize_flow_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(normalize_flow_sptr self, int m)"""
        return _tempest_swig.normalize_flow_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(normalize_flow_sptr self)"""
        return _tempest_swig.normalize_flow_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(normalize_flow_sptr self) -> bool"""
        return _tempest_swig.normalize_flow_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(normalize_flow_sptr self, int m)"""
        return _tempest_swig.normalize_flow_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(normalize_flow_sptr self) -> int"""
        return _tempest_swig.normalize_flow_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(normalize_flow_sptr self, int i) -> long"""
        return _tempest_swig.normalize_flow_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(normalize_flow_sptr self, long max_output_buffer)
        set_max_output_buffer(normalize_flow_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.normalize_flow_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(normalize_flow_sptr self, int i) -> long"""
        return _tempest_swig.normalize_flow_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(normalize_flow_sptr self, long min_output_buffer)
        set_min_output_buffer(normalize_flow_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.normalize_flow_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(normalize_flow_sptr self, int which) -> float
        pc_input_buffers_full(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(normalize_flow_sptr self, int which) -> float
        pc_input_buffers_full_avg(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(normalize_flow_sptr self, int which) -> float
        pc_input_buffers_full_var(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(normalize_flow_sptr self, int which) -> float
        pc_output_buffers_full(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(normalize_flow_sptr self, int which) -> float
        pc_output_buffers_full_avg(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(normalize_flow_sptr self, int which) -> float
        pc_output_buffers_full_var(normalize_flow_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.normalize_flow_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(normalize_flow_sptr self) -> float"""
        return _tempest_swig.normalize_flow_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(normalize_flow_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.normalize_flow_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(normalize_flow_sptr self)"""
        return _tempest_swig.normalize_flow_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(normalize_flow_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.normalize_flow_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(normalize_flow_sptr self) -> int"""
        return _tempest_swig.normalize_flow_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(normalize_flow_sptr self) -> int"""
        return _tempest_swig.normalize_flow_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(normalize_flow_sptr self, int priority) -> int"""
        return _tempest_swig.normalize_flow_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(normalize_flow_sptr self) -> std::string"""
        return _tempest_swig.normalize_flow_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(normalize_flow_sptr self) -> std::string"""
        return _tempest_swig.normalize_flow_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(normalize_flow_sptr self) -> io_signature_sptr"""
        return _tempest_swig.normalize_flow_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(normalize_flow_sptr self) -> io_signature_sptr"""
        return _tempest_swig.normalize_flow_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(normalize_flow_sptr self) -> long"""
        return _tempest_swig.normalize_flow_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(normalize_flow_sptr self) -> basic_block_sptr"""
        return _tempest_swig.normalize_flow_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(normalize_flow_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.normalize_flow_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(normalize_flow_sptr self) -> std::string"""
        return _tempest_swig.normalize_flow_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(normalize_flow_sptr self, std::string name)"""
        return _tempest_swig.normalize_flow_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(normalize_flow_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.normalize_flow_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(normalize_flow_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.normalize_flow_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(normalize_flow_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.normalize_flow_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(normalize_flow_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.normalize_flow_sptr_message_subscribers(self, which_port)

# Register normalize_flow_sptr in _tempest_swig:
_tempest_swig.normalize_flow_sptr_swigregister(normalize_flow_sptr)


normalize_flow_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
normalize_flow = normalize_flow.make;

class fine_sampling_synchronization(object):
    r"""Proxy of C++ gr::tempest::fine_sampling_synchronization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float") -> "gr::tempest::fine_sampling_synchronization::sptr":
        r"""make(int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba) -> fine_sampling_synchronization_sptr"""
        return _tempest_swig.fine_sampling_synchronization_make(Htotal, Vtotal, correct_sampling, max_deviation, update_proba)

    def set_Htotal_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_Vtotal(fine_sampling_synchronization self, int Htotal, int Vtotal)"""
        return _tempest_swig.fine_sampling_synchronization_set_Htotal_Vtotal(self, Htotal, Vtotal)
    __swig_destroy__ = _tempest_swig.delete_fine_sampling_synchronization

# Register fine_sampling_synchronization in _tempest_swig:
_tempest_swig.fine_sampling_synchronization_swigregister(fine_sampling_synchronization)

def fine_sampling_synchronization_make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float") -> "gr::tempest::fine_sampling_synchronization::sptr":
    r"""fine_sampling_synchronization_make(int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba) -> fine_sampling_synchronization_sptr"""
    return _tempest_swig.fine_sampling_synchronization_make(Htotal, Vtotal, correct_sampling, max_deviation, update_proba)

class fine_sampling_synchronization_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::fine_sampling_synchronization > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(fine_sampling_synchronization_sptr self) -> fine_sampling_synchronization_sptr
        __init__(fine_sampling_synchronization_sptr self, fine_sampling_synchronization p) -> fine_sampling_synchronization_sptr
        """
        _tempest_swig.fine_sampling_synchronization_sptr_swiginit(self, _tempest_swig.new_fine_sampling_synchronization_sptr(*args))

    def __deref__(self) -> "gr::tempest::fine_sampling_synchronization *":
        r"""__deref__(fine_sampling_synchronization_sptr self) -> fine_sampling_synchronization"""
        return _tempest_swig.fine_sampling_synchronization_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_fine_sampling_synchronization_sptr

    def make(self, Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float") -> "gr::tempest::fine_sampling_synchronization::sptr":
        r"""make(fine_sampling_synchronization_sptr self, int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba) -> fine_sampling_synchronization_sptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_make(self, Htotal, Vtotal, correct_sampling, max_deviation, update_proba)

    def set_Htotal_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_Vtotal(fine_sampling_synchronization_sptr self, int Htotal, int Vtotal)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_Htotal_Vtotal(self, Htotal, Vtotal)

    def history(self) -> "unsigned int":
        r"""history(fine_sampling_synchronization_sptr self) -> unsigned int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(fine_sampling_synchronization_sptr self, int which, int delay)
        declare_sample_delay(fine_sampling_synchronization_sptr self, unsigned int delay)
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(fine_sampling_synchronization_sptr self, int which) -> unsigned int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(fine_sampling_synchronization_sptr self, int multiple)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(fine_sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(fine_sampling_synchronization_sptr self) -> double"""
        return _tempest_swig.fine_sampling_synchronization_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(fine_sampling_synchronization_sptr self) -> uint64_t"""
        return _tempest_swig.fine_sampling_synchronization_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(fine_sampling_synchronization_sptr self) -> uint64_t"""
        return _tempest_swig.fine_sampling_synchronization_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(fine_sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.fine_sampling_synchronization_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(fine_sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.fine_sampling_synchronization_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(fine_sampling_synchronization_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.fine_sampling_synchronization_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(fine_sampling_synchronization_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.fine_sampling_synchronization_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(fine_sampling_synchronization_sptr self, std::string level)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(fine_sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.fine_sampling_synchronization_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(fine_sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(fine_sampling_synchronization_sptr self, int m)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(fine_sampling_synchronization_sptr self)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(fine_sampling_synchronization_sptr self) -> bool"""
        return _tempest_swig.fine_sampling_synchronization_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(fine_sampling_synchronization_sptr self, int m)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(fine_sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(fine_sampling_synchronization_sptr self, int i) -> long"""
        return _tempest_swig.fine_sampling_synchronization_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(fine_sampling_synchronization_sptr self, long max_output_buffer)
        set_max_output_buffer(fine_sampling_synchronization_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(fine_sampling_synchronization_sptr self, int i) -> long"""
        return _tempest_swig.fine_sampling_synchronization_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(fine_sampling_synchronization_sptr self, long min_output_buffer)
        set_min_output_buffer(fine_sampling_synchronization_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(fine_sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(fine_sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_avg(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(fine_sampling_synchronization_sptr self, int which) -> float
        pc_input_buffers_full_var(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(fine_sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(fine_sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_avg(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(fine_sampling_synchronization_sptr self, int which) -> float
        pc_output_buffers_full_var(fine_sampling_synchronization_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(fine_sampling_synchronization_sptr self) -> float"""
        return _tempest_swig.fine_sampling_synchronization_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(fine_sampling_synchronization_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(fine_sampling_synchronization_sptr self)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(fine_sampling_synchronization_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.fine_sampling_synchronization_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(fine_sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(fine_sampling_synchronization_sptr self) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(fine_sampling_synchronization_sptr self, int priority) -> int"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(fine_sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.fine_sampling_synchronization_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(fine_sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.fine_sampling_synchronization_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(fine_sampling_synchronization_sptr self) -> io_signature_sptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(fine_sampling_synchronization_sptr self) -> io_signature_sptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(fine_sampling_synchronization_sptr self) -> long"""
        return _tempest_swig.fine_sampling_synchronization_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(fine_sampling_synchronization_sptr self) -> basic_block_sptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(fine_sampling_synchronization_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.fine_sampling_synchronization_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(fine_sampling_synchronization_sptr self) -> std::string"""
        return _tempest_swig.fine_sampling_synchronization_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(fine_sampling_synchronization_sptr self, std::string name)"""
        return _tempest_swig.fine_sampling_synchronization_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(fine_sampling_synchronization_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.fine_sampling_synchronization_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(fine_sampling_synchronization_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(fine_sampling_synchronization_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(fine_sampling_synchronization_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.fine_sampling_synchronization_sptr_message_subscribers(self, which_port)

# Register fine_sampling_synchronization_sptr in _tempest_swig:
_tempest_swig.fine_sampling_synchronization_sptr_swigregister(fine_sampling_synchronization_sptr)


fine_sampling_synchronization_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fine_sampling_synchronization = fine_sampling_synchronization.make;

class sync_detector(object):
    r"""Proxy of C++ gr::tempest::sync_detector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(hscreen: "int", vscreen: "int", hblanking: "int", vblanking: "int") -> "gr::tempest::sync_detector::sptr":
        r"""make(int hscreen, int vscreen, int hblanking, int vblanking) -> sync_detector_sptr"""
        return _tempest_swig.sync_detector_make(hscreen, vscreen, hblanking, vblanking)
    __swig_destroy__ = _tempest_swig.delete_sync_detector

# Register sync_detector in _tempest_swig:
_tempest_swig.sync_detector_swigregister(sync_detector)

def sync_detector_make(hscreen: "int", vscreen: "int", hblanking: "int", vblanking: "int") -> "gr::tempest::sync_detector::sptr":
    r"""sync_detector_make(int hscreen, int vscreen, int hblanking, int vblanking) -> sync_detector_sptr"""
    return _tempest_swig.sync_detector_make(hscreen, vscreen, hblanking, vblanking)

class sync_detector_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::sync_detector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(sync_detector_sptr self) -> sync_detector_sptr
        __init__(sync_detector_sptr self, sync_detector p) -> sync_detector_sptr
        """
        _tempest_swig.sync_detector_sptr_swiginit(self, _tempest_swig.new_sync_detector_sptr(*args))

    def __deref__(self) -> "gr::tempest::sync_detector *":
        r"""__deref__(sync_detector_sptr self) -> sync_detector"""
        return _tempest_swig.sync_detector_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_sync_detector_sptr

    def make(self, hscreen: "int", vscreen: "int", hblanking: "int", vblanking: "int") -> "gr::tempest::sync_detector::sptr":
        r"""make(sync_detector_sptr self, int hscreen, int vscreen, int hblanking, int vblanking) -> sync_detector_sptr"""
        return _tempest_swig.sync_detector_sptr_make(self, hscreen, vscreen, hblanking, vblanking)

    def history(self) -> "unsigned int":
        r"""history(sync_detector_sptr self) -> unsigned int"""
        return _tempest_swig.sync_detector_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(sync_detector_sptr self, int which, int delay)
        declare_sample_delay(sync_detector_sptr self, unsigned int delay)
        """
        return _tempest_swig.sync_detector_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(sync_detector_sptr self, int which) -> unsigned int"""
        return _tempest_swig.sync_detector_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(sync_detector_sptr self, int multiple)"""
        return _tempest_swig.sync_detector_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(sync_detector_sptr self) -> int"""
        return _tempest_swig.sync_detector_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(sync_detector_sptr self) -> double"""
        return _tempest_swig.sync_detector_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(sync_detector_sptr self) -> uint64_t"""
        return _tempest_swig.sync_detector_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(sync_detector_sptr self) -> uint64_t"""
        return _tempest_swig.sync_detector_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(sync_detector_sptr self) -> bool"""
        return _tempest_swig.sync_detector_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(sync_detector_sptr self) -> bool"""
        return _tempest_swig.sync_detector_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(sync_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.sync_detector_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(sync_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.sync_detector_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(sync_detector_sptr self, std::string level)"""
        return _tempest_swig.sync_detector_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(sync_detector_sptr self) -> std::string"""
        return _tempest_swig.sync_detector_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(sync_detector_sptr self) -> int"""
        return _tempest_swig.sync_detector_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(sync_detector_sptr self, int m)"""
        return _tempest_swig.sync_detector_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(sync_detector_sptr self)"""
        return _tempest_swig.sync_detector_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(sync_detector_sptr self) -> bool"""
        return _tempest_swig.sync_detector_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(sync_detector_sptr self, int m)"""
        return _tempest_swig.sync_detector_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(sync_detector_sptr self) -> int"""
        return _tempest_swig.sync_detector_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(sync_detector_sptr self, int i) -> long"""
        return _tempest_swig.sync_detector_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(sync_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(sync_detector_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.sync_detector_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(sync_detector_sptr self, int i) -> long"""
        return _tempest_swig.sync_detector_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(sync_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(sync_detector_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.sync_detector_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(sync_detector_sptr self, int which) -> float
        pc_input_buffers_full(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(sync_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(sync_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(sync_detector_sptr self, int which) -> float
        pc_output_buffers_full(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(sync_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(sync_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(sync_detector_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.sync_detector_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(sync_detector_sptr self) -> float"""
        return _tempest_swig.sync_detector_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(sync_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.sync_detector_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(sync_detector_sptr self)"""
        return _tempest_swig.sync_detector_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(sync_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.sync_detector_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(sync_detector_sptr self) -> int"""
        return _tempest_swig.sync_detector_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(sync_detector_sptr self) -> int"""
        return _tempest_swig.sync_detector_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(sync_detector_sptr self, int priority) -> int"""
        return _tempest_swig.sync_detector_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(sync_detector_sptr self) -> std::string"""
        return _tempest_swig.sync_detector_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(sync_detector_sptr self) -> std::string"""
        return _tempest_swig.sync_detector_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(sync_detector_sptr self) -> io_signature_sptr"""
        return _tempest_swig.sync_detector_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(sync_detector_sptr self) -> io_signature_sptr"""
        return _tempest_swig.sync_detector_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(sync_detector_sptr self) -> long"""
        return _tempest_swig.sync_detector_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(sync_detector_sptr self) -> basic_block_sptr"""
        return _tempest_swig.sync_detector_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(sync_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.sync_detector_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(sync_detector_sptr self) -> std::string"""
        return _tempest_swig.sync_detector_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(sync_detector_sptr self, std::string name)"""
        return _tempest_swig.sync_detector_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(sync_detector_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.sync_detector_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(sync_detector_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.sync_detector_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(sync_detector_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.sync_detector_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(sync_detector_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.sync_detector_sptr_message_subscribers(self, which_port)

# Register sync_detector_sptr in _tempest_swig:
_tempest_swig.sync_detector_sptr_swigregister(sync_detector_sptr)


sync_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
sync_detector = sync_detector.make;

class frame_drop(object):
    r"""Proxy of C++ gr::tempest::frame_drop class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float", actual_samp_rate: "double") -> "gr::tempest::frame_drop::sptr":
        r"""make(int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba, double actual_samp_rate) -> frame_drop_sptr"""
        return _tempest_swig.frame_drop_make(Htotal, Vtotal, correct_sampling, max_deviation, update_proba, actual_samp_rate)
    __swig_destroy__ = _tempest_swig.delete_frame_drop

# Register frame_drop in _tempest_swig:
_tempest_swig.frame_drop_swigregister(frame_drop)

def frame_drop_make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float", actual_samp_rate: "double") -> "gr::tempest::frame_drop::sptr":
    r"""frame_drop_make(int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba, double actual_samp_rate) -> frame_drop_sptr"""
    return _tempest_swig.frame_drop_make(Htotal, Vtotal, correct_sampling, max_deviation, update_proba, actual_samp_rate)

class frame_drop_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::frame_drop > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frame_drop_sptr self) -> frame_drop_sptr
        __init__(frame_drop_sptr self, frame_drop p) -> frame_drop_sptr
        """
        _tempest_swig.frame_drop_sptr_swiginit(self, _tempest_swig.new_frame_drop_sptr(*args))

    def __deref__(self) -> "gr::tempest::frame_drop *":
        r"""__deref__(frame_drop_sptr self) -> frame_drop"""
        return _tempest_swig.frame_drop_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_frame_drop_sptr

    def make(self, Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float", update_proba: "float", actual_samp_rate: "double") -> "gr::tempest::frame_drop::sptr":
        r"""make(frame_drop_sptr self, int Htotal, int Vtotal, int correct_sampling, float max_deviation, float update_proba, double actual_samp_rate) -> frame_drop_sptr"""
        return _tempest_swig.frame_drop_sptr_make(self, Htotal, Vtotal, correct_sampling, max_deviation, update_proba, actual_samp_rate)

    def history(self) -> "unsigned int":
        r"""history(frame_drop_sptr self) -> unsigned int"""
        return _tempest_swig.frame_drop_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frame_drop_sptr self, int which, int delay)
        declare_sample_delay(frame_drop_sptr self, unsigned int delay)
        """
        return _tempest_swig.frame_drop_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frame_drop_sptr self, int which) -> unsigned int"""
        return _tempest_swig.frame_drop_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frame_drop_sptr self, int multiple)"""
        return _tempest_swig.frame_drop_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frame_drop_sptr self) -> int"""
        return _tempest_swig.frame_drop_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frame_drop_sptr self) -> double"""
        return _tempest_swig.frame_drop_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frame_drop_sptr self) -> uint64_t"""
        return _tempest_swig.frame_drop_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frame_drop_sptr self) -> uint64_t"""
        return _tempest_swig.frame_drop_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frame_drop_sptr self) -> bool"""
        return _tempest_swig.frame_drop_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frame_drop_sptr self) -> bool"""
        return _tempest_swig.frame_drop_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frame_drop_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.frame_drop_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frame_drop_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.frame_drop_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frame_drop_sptr self, std::string level)"""
        return _tempest_swig.frame_drop_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frame_drop_sptr self) -> std::string"""
        return _tempest_swig.frame_drop_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frame_drop_sptr self) -> int"""
        return _tempest_swig.frame_drop_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frame_drop_sptr self, int m)"""
        return _tempest_swig.frame_drop_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frame_drop_sptr self)"""
        return _tempest_swig.frame_drop_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frame_drop_sptr self) -> bool"""
        return _tempest_swig.frame_drop_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frame_drop_sptr self, int m)"""
        return _tempest_swig.frame_drop_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frame_drop_sptr self) -> int"""
        return _tempest_swig.frame_drop_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frame_drop_sptr self, int i) -> long"""
        return _tempest_swig.frame_drop_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frame_drop_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_drop_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.frame_drop_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frame_drop_sptr self, int i) -> long"""
        return _tempest_swig.frame_drop_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frame_drop_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_drop_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.frame_drop_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frame_drop_sptr self, int which) -> float
        pc_input_buffers_full(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frame_drop_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frame_drop_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frame_drop_sptr self, int which) -> float
        pc_output_buffers_full(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frame_drop_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frame_drop_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_drop_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.frame_drop_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frame_drop_sptr self) -> float"""
        return _tempest_swig.frame_drop_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frame_drop_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.frame_drop_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frame_drop_sptr self)"""
        return _tempest_swig.frame_drop_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frame_drop_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.frame_drop_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frame_drop_sptr self) -> int"""
        return _tempest_swig.frame_drop_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frame_drop_sptr self) -> int"""
        return _tempest_swig.frame_drop_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frame_drop_sptr self, int priority) -> int"""
        return _tempest_swig.frame_drop_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frame_drop_sptr self) -> std::string"""
        return _tempest_swig.frame_drop_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frame_drop_sptr self) -> std::string"""
        return _tempest_swig.frame_drop_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frame_drop_sptr self) -> io_signature_sptr"""
        return _tempest_swig.frame_drop_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frame_drop_sptr self) -> io_signature_sptr"""
        return _tempest_swig.frame_drop_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frame_drop_sptr self) -> long"""
        return _tempest_swig.frame_drop_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frame_drop_sptr self) -> basic_block_sptr"""
        return _tempest_swig.frame_drop_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frame_drop_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.frame_drop_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frame_drop_sptr self) -> std::string"""
        return _tempest_swig.frame_drop_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frame_drop_sptr self, std::string name)"""
        return _tempest_swig.frame_drop_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frame_drop_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.frame_drop_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frame_drop_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.frame_drop_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frame_drop_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.frame_drop_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frame_drop_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.frame_drop_sptr_message_subscribers(self, which_port)

# Register frame_drop_sptr in _tempest_swig:
_tempest_swig.frame_drop_sptr_swigregister(frame_drop_sptr)


frame_drop_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_drop = frame_drop.make;

class fft_peak_fine_sampling_sync(object):
    r"""Proxy of C++ gr::tempest::fft_peak_fine_sampling_sync class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sample_rate: "int", size: "int", refresh_rate: "int", Vvisible: "int", Hvisible: "int", automatic_mode: "bool") -> "gr::tempest::fft_peak_fine_sampling_sync::sptr":
        r"""make(int sample_rate, int size, int refresh_rate, int Vvisible, int Hvisible, bool automatic_mode) -> fft_peak_fine_sampling_sync_sptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_make(sample_rate, size, refresh_rate, Vvisible, Hvisible, automatic_mode)
    __swig_destroy__ = _tempest_swig.delete_fft_peak_fine_sampling_sync

# Register fft_peak_fine_sampling_sync in _tempest_swig:
_tempest_swig.fft_peak_fine_sampling_sync_swigregister(fft_peak_fine_sampling_sync)

def fft_peak_fine_sampling_sync_make(sample_rate: "int", size: "int", refresh_rate: "int", Vvisible: "int", Hvisible: "int", automatic_mode: "bool") -> "gr::tempest::fft_peak_fine_sampling_sync::sptr":
    r"""fft_peak_fine_sampling_sync_make(int sample_rate, int size, int refresh_rate, int Vvisible, int Hvisible, bool automatic_mode) -> fft_peak_fine_sampling_sync_sptr"""
    return _tempest_swig.fft_peak_fine_sampling_sync_make(sample_rate, size, refresh_rate, Vvisible, Hvisible, automatic_mode)

class fft_peak_fine_sampling_sync_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::fft_peak_fine_sampling_sync > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(fft_peak_fine_sampling_sync_sptr self) -> fft_peak_fine_sampling_sync_sptr
        __init__(fft_peak_fine_sampling_sync_sptr self, fft_peak_fine_sampling_sync p) -> fft_peak_fine_sampling_sync_sptr
        """
        _tempest_swig.fft_peak_fine_sampling_sync_sptr_swiginit(self, _tempest_swig.new_fft_peak_fine_sampling_sync_sptr(*args))

    def __deref__(self) -> "gr::tempest::fft_peak_fine_sampling_sync *":
        r"""__deref__(fft_peak_fine_sampling_sync_sptr self) -> fft_peak_fine_sampling_sync"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_fft_peak_fine_sampling_sync_sptr

    def make(self, sample_rate: "int", size: "int", refresh_rate: "int", Vvisible: "int", Hvisible: "int", automatic_mode: "bool") -> "gr::tempest::fft_peak_fine_sampling_sync::sptr":
        r"""make(fft_peak_fine_sampling_sync_sptr self, int sample_rate, int size, int refresh_rate, int Vvisible, int Hvisible, bool automatic_mode) -> fft_peak_fine_sampling_sync_sptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_make(self, sample_rate, size, refresh_rate, Vvisible, Hvisible, automatic_mode)

    def history(self) -> "unsigned int":
        r"""history(fft_peak_fine_sampling_sync_sptr self) -> unsigned int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(fft_peak_fine_sampling_sync_sptr self, int which, int delay)
        declare_sample_delay(fft_peak_fine_sampling_sync_sptr self, unsigned int delay)
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(fft_peak_fine_sampling_sync_sptr self, int which) -> unsigned int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(fft_peak_fine_sampling_sync_sptr self, int multiple)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(fft_peak_fine_sampling_sync_sptr self) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(fft_peak_fine_sampling_sync_sptr self) -> double"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(fft_peak_fine_sampling_sync_sptr self) -> uint64_t"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(fft_peak_fine_sampling_sync_sptr self) -> uint64_t"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(fft_peak_fine_sampling_sync_sptr self) -> bool"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(fft_peak_fine_sampling_sync_sptr self) -> bool"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(fft_peak_fine_sampling_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(fft_peak_fine_sampling_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(fft_peak_fine_sampling_sync_sptr self, std::string level)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(fft_peak_fine_sampling_sync_sptr self) -> std::string"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(fft_peak_fine_sampling_sync_sptr self) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(fft_peak_fine_sampling_sync_sptr self, int m)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(fft_peak_fine_sampling_sync_sptr self)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(fft_peak_fine_sampling_sync_sptr self) -> bool"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(fft_peak_fine_sampling_sync_sptr self, int m)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(fft_peak_fine_sampling_sync_sptr self) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(fft_peak_fine_sampling_sync_sptr self, int i) -> long"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(fft_peak_fine_sampling_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_peak_fine_sampling_sync_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(fft_peak_fine_sampling_sync_sptr self, int i) -> long"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(fft_peak_fine_sampling_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_peak_fine_sampling_sync_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_input_buffers_full(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_output_buffers_full(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(fft_peak_fine_sampling_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_peak_fine_sampling_sync_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(fft_peak_fine_sampling_sync_sptr self) -> float"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(fft_peak_fine_sampling_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(fft_peak_fine_sampling_sync_sptr self)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(fft_peak_fine_sampling_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(fft_peak_fine_sampling_sync_sptr self) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(fft_peak_fine_sampling_sync_sptr self) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(fft_peak_fine_sampling_sync_sptr self, int priority) -> int"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(fft_peak_fine_sampling_sync_sptr self) -> std::string"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(fft_peak_fine_sampling_sync_sptr self) -> std::string"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(fft_peak_fine_sampling_sync_sptr self) -> io_signature_sptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(fft_peak_fine_sampling_sync_sptr self) -> io_signature_sptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(fft_peak_fine_sampling_sync_sptr self) -> long"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(fft_peak_fine_sampling_sync_sptr self) -> basic_block_sptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(fft_peak_fine_sampling_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(fft_peak_fine_sampling_sync_sptr self) -> std::string"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(fft_peak_fine_sampling_sync_sptr self, std::string name)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(fft_peak_fine_sampling_sync_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(fft_peak_fine_sampling_sync_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(fft_peak_fine_sampling_sync_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(fft_peak_fine_sampling_sync_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.fft_peak_fine_sampling_sync_sptr_message_subscribers(self, which_port)

# Register fft_peak_fine_sampling_sync_sptr in _tempest_swig:
_tempest_swig.fft_peak_fine_sampling_sync_sptr_swigregister(fft_peak_fine_sampling_sync_sptr)


fft_peak_fine_sampling_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_peak_fine_sampling_sync = fft_peak_fine_sampling_sync.make;

class infer_screen_resolution(object):
    r"""Proxy of C++ gr::tempest::infer_screen_resolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_refresh_rate(self, refresh_rate: "float") -> "void":
        r"""set_refresh_rate(infer_screen_resolution self, float refresh_rate)"""
        return _tempest_swig.infer_screen_resolution_set_refresh_rate(self, refresh_rate)

    @staticmethod
    def make(sample_rate: "int", fft_size: "int", refresh_rate: "float", automatic_mode: "bool") -> "gr::tempest::infer_screen_resolution::sptr":
        r"""make(int sample_rate, int fft_size, float refresh_rate, bool automatic_mode) -> infer_screen_resolution_sptr"""
        return _tempest_swig.infer_screen_resolution_make(sample_rate, fft_size, refresh_rate, automatic_mode)
    __swig_destroy__ = _tempest_swig.delete_infer_screen_resolution

# Register infer_screen_resolution in _tempest_swig:
_tempest_swig.infer_screen_resolution_swigregister(infer_screen_resolution)

def infer_screen_resolution_make(sample_rate: "int", fft_size: "int", refresh_rate: "float", automatic_mode: "bool") -> "gr::tempest::infer_screen_resolution::sptr":
    r"""infer_screen_resolution_make(int sample_rate, int fft_size, float refresh_rate, bool automatic_mode) -> infer_screen_resolution_sptr"""
    return _tempest_swig.infer_screen_resolution_make(sample_rate, fft_size, refresh_rate, automatic_mode)

class infer_screen_resolution_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::infer_screen_resolution > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(infer_screen_resolution_sptr self) -> infer_screen_resolution_sptr
        __init__(infer_screen_resolution_sptr self, infer_screen_resolution p) -> infer_screen_resolution_sptr
        """
        _tempest_swig.infer_screen_resolution_sptr_swiginit(self, _tempest_swig.new_infer_screen_resolution_sptr(*args))

    def __deref__(self) -> "gr::tempest::infer_screen_resolution *":
        r"""__deref__(infer_screen_resolution_sptr self) -> infer_screen_resolution"""
        return _tempest_swig.infer_screen_resolution_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_infer_screen_resolution_sptr

    def set_refresh_rate(self, refresh_rate: "float") -> "void":
        r"""set_refresh_rate(infer_screen_resolution_sptr self, float refresh_rate)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_refresh_rate(self, refresh_rate)

    def make(self, sample_rate: "int", fft_size: "int", refresh_rate: "float", automatic_mode: "bool") -> "gr::tempest::infer_screen_resolution::sptr":
        r"""make(infer_screen_resolution_sptr self, int sample_rate, int fft_size, float refresh_rate, bool automatic_mode) -> infer_screen_resolution_sptr"""
        return _tempest_swig.infer_screen_resolution_sptr_make(self, sample_rate, fft_size, refresh_rate, automatic_mode)

    def history(self) -> "unsigned int":
        r"""history(infer_screen_resolution_sptr self) -> unsigned int"""
        return _tempest_swig.infer_screen_resolution_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(infer_screen_resolution_sptr self, int which, int delay)
        declare_sample_delay(infer_screen_resolution_sptr self, unsigned int delay)
        """
        return _tempest_swig.infer_screen_resolution_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(infer_screen_resolution_sptr self, int which) -> unsigned int"""
        return _tempest_swig.infer_screen_resolution_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(infer_screen_resolution_sptr self, int multiple)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(infer_screen_resolution_sptr self) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(infer_screen_resolution_sptr self) -> double"""
        return _tempest_swig.infer_screen_resolution_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(infer_screen_resolution_sptr self) -> uint64_t"""
        return _tempest_swig.infer_screen_resolution_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(infer_screen_resolution_sptr self) -> uint64_t"""
        return _tempest_swig.infer_screen_resolution_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(infer_screen_resolution_sptr self) -> bool"""
        return _tempest_swig.infer_screen_resolution_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(infer_screen_resolution_sptr self) -> bool"""
        return _tempest_swig.infer_screen_resolution_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(infer_screen_resolution_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.infer_screen_resolution_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(infer_screen_resolution_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.infer_screen_resolution_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(infer_screen_resolution_sptr self, std::string level)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(infer_screen_resolution_sptr self) -> std::string"""
        return _tempest_swig.infer_screen_resolution_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(infer_screen_resolution_sptr self) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(infer_screen_resolution_sptr self, int m)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(infer_screen_resolution_sptr self)"""
        return _tempest_swig.infer_screen_resolution_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(infer_screen_resolution_sptr self) -> bool"""
        return _tempest_swig.infer_screen_resolution_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(infer_screen_resolution_sptr self, int m)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(infer_screen_resolution_sptr self) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(infer_screen_resolution_sptr self, int i) -> long"""
        return _tempest_swig.infer_screen_resolution_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(infer_screen_resolution_sptr self, long max_output_buffer)
        set_max_output_buffer(infer_screen_resolution_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.infer_screen_resolution_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(infer_screen_resolution_sptr self, int i) -> long"""
        return _tempest_swig.infer_screen_resolution_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(infer_screen_resolution_sptr self, long min_output_buffer)
        set_min_output_buffer(infer_screen_resolution_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.infer_screen_resolution_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(infer_screen_resolution_sptr self, int which) -> float
        pc_input_buffers_full(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(infer_screen_resolution_sptr self, int which) -> float
        pc_input_buffers_full_avg(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(infer_screen_resolution_sptr self, int which) -> float
        pc_input_buffers_full_var(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(infer_screen_resolution_sptr self, int which) -> float
        pc_output_buffers_full(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(infer_screen_resolution_sptr self, int which) -> float
        pc_output_buffers_full_avg(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(infer_screen_resolution_sptr self, int which) -> float
        pc_output_buffers_full_var(infer_screen_resolution_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.infer_screen_resolution_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(infer_screen_resolution_sptr self) -> float"""
        return _tempest_swig.infer_screen_resolution_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(infer_screen_resolution_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(infer_screen_resolution_sptr self)"""
        return _tempest_swig.infer_screen_resolution_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(infer_screen_resolution_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.infer_screen_resolution_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(infer_screen_resolution_sptr self) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(infer_screen_resolution_sptr self) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(infer_screen_resolution_sptr self, int priority) -> int"""
        return _tempest_swig.infer_screen_resolution_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(infer_screen_resolution_sptr self) -> std::string"""
        return _tempest_swig.infer_screen_resolution_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(infer_screen_resolution_sptr self) -> std::string"""
        return _tempest_swig.infer_screen_resolution_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(infer_screen_resolution_sptr self) -> io_signature_sptr"""
        return _tempest_swig.infer_screen_resolution_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(infer_screen_resolution_sptr self) -> io_signature_sptr"""
        return _tempest_swig.infer_screen_resolution_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(infer_screen_resolution_sptr self) -> long"""
        return _tempest_swig.infer_screen_resolution_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(infer_screen_resolution_sptr self) -> basic_block_sptr"""
        return _tempest_swig.infer_screen_resolution_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(infer_screen_resolution_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.infer_screen_resolution_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(infer_screen_resolution_sptr self) -> std::string"""
        return _tempest_swig.infer_screen_resolution_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(infer_screen_resolution_sptr self, std::string name)"""
        return _tempest_swig.infer_screen_resolution_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(infer_screen_resolution_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.infer_screen_resolution_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(infer_screen_resolution_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.infer_screen_resolution_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(infer_screen_resolution_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.infer_screen_resolution_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(infer_screen_resolution_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.infer_screen_resolution_sptr_message_subscribers(self, which_port)

# Register infer_screen_resolution_sptr in _tempest_swig:
_tempest_swig.infer_screen_resolution_sptr_swigregister(infer_screen_resolution_sptr)


infer_screen_resolution_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
infer_screen_resolution = infer_screen_resolution.make;

class ssamp_correction(object):
    r"""Proxy of C++ gr::tempest::ssamp_correction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float") -> "gr::tempest::ssamp_correction::sptr":
        r"""make(int Htotal, int Vtotal, int correct_sampling, float max_deviation) -> ssamp_correction_sptr"""
        return _tempest_swig.ssamp_correction_make(Htotal, Vtotal, correct_sampling, max_deviation)

    def set_Htotal_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_Vtotal(ssamp_correction self, int Htotal, int Vtotal)"""
        return _tempest_swig.ssamp_correction_set_Htotal_Vtotal(self, Htotal, Vtotal)
    __swig_destroy__ = _tempest_swig.delete_ssamp_correction

# Register ssamp_correction in _tempest_swig:
_tempest_swig.ssamp_correction_swigregister(ssamp_correction)

def ssamp_correction_make(Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float") -> "gr::tempest::ssamp_correction::sptr":
    r"""ssamp_correction_make(int Htotal, int Vtotal, int correct_sampling, float max_deviation) -> ssamp_correction_sptr"""
    return _tempest_swig.ssamp_correction_make(Htotal, Vtotal, correct_sampling, max_deviation)

class ssamp_correction_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::tempest::ssamp_correction > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ssamp_correction_sptr self) -> ssamp_correction_sptr
        __init__(ssamp_correction_sptr self, ssamp_correction p) -> ssamp_correction_sptr
        """
        _tempest_swig.ssamp_correction_sptr_swiginit(self, _tempest_swig.new_ssamp_correction_sptr(*args))

    def __deref__(self) -> "gr::tempest::ssamp_correction *":
        r"""__deref__(ssamp_correction_sptr self) -> ssamp_correction"""
        return _tempest_swig.ssamp_correction_sptr___deref__(self)
    __swig_destroy__ = _tempest_swig.delete_ssamp_correction_sptr

    def make(self, Htotal: "int", Vtotal: "int", correct_sampling: "int", max_deviation: "float") -> "gr::tempest::ssamp_correction::sptr":
        r"""make(ssamp_correction_sptr self, int Htotal, int Vtotal, int correct_sampling, float max_deviation) -> ssamp_correction_sptr"""
        return _tempest_swig.ssamp_correction_sptr_make(self, Htotal, Vtotal, correct_sampling, max_deviation)

    def set_Htotal_Vtotal(self, Htotal: "int", Vtotal: "int") -> "void":
        r"""set_Htotal_Vtotal(ssamp_correction_sptr self, int Htotal, int Vtotal)"""
        return _tempest_swig.ssamp_correction_sptr_set_Htotal_Vtotal(self, Htotal, Vtotal)

    def history(self) -> "unsigned int":
        r"""history(ssamp_correction_sptr self) -> unsigned int"""
        return _tempest_swig.ssamp_correction_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(ssamp_correction_sptr self, int which, int delay)
        declare_sample_delay(ssamp_correction_sptr self, unsigned int delay)
        """
        return _tempest_swig.ssamp_correction_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(ssamp_correction_sptr self, int which) -> unsigned int"""
        return _tempest_swig.ssamp_correction_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(ssamp_correction_sptr self, int multiple)"""
        return _tempest_swig.ssamp_correction_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(ssamp_correction_sptr self) -> int"""
        return _tempest_swig.ssamp_correction_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(ssamp_correction_sptr self) -> double"""
        return _tempest_swig.ssamp_correction_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(ssamp_correction_sptr self) -> uint64_t"""
        return _tempest_swig.ssamp_correction_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(ssamp_correction_sptr self) -> uint64_t"""
        return _tempest_swig.ssamp_correction_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(ssamp_correction_sptr self) -> bool"""
        return _tempest_swig.ssamp_correction_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(ssamp_correction_sptr self) -> bool"""
        return _tempest_swig.ssamp_correction_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(ssamp_correction_sptr self, unsigned int which_input) -> uint64_t"""
        return _tempest_swig.ssamp_correction_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(ssamp_correction_sptr self, unsigned int which_output) -> uint64_t"""
        return _tempest_swig.ssamp_correction_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(ssamp_correction_sptr self, std::string level)"""
        return _tempest_swig.ssamp_correction_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(ssamp_correction_sptr self) -> std::string"""
        return _tempest_swig.ssamp_correction_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(ssamp_correction_sptr self) -> int"""
        return _tempest_swig.ssamp_correction_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(ssamp_correction_sptr self, int m)"""
        return _tempest_swig.ssamp_correction_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(ssamp_correction_sptr self)"""
        return _tempest_swig.ssamp_correction_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(ssamp_correction_sptr self) -> bool"""
        return _tempest_swig.ssamp_correction_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(ssamp_correction_sptr self, int m)"""
        return _tempest_swig.ssamp_correction_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(ssamp_correction_sptr self) -> int"""
        return _tempest_swig.ssamp_correction_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(ssamp_correction_sptr self, int i) -> long"""
        return _tempest_swig.ssamp_correction_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(ssamp_correction_sptr self, long max_output_buffer)
        set_max_output_buffer(ssamp_correction_sptr self, int port, long max_output_buffer)
        """
        return _tempest_swig.ssamp_correction_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(ssamp_correction_sptr self, int i) -> long"""
        return _tempest_swig.ssamp_correction_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(ssamp_correction_sptr self, long min_output_buffer)
        set_min_output_buffer(ssamp_correction_sptr self, int port, long min_output_buffer)
        """
        return _tempest_swig.ssamp_correction_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(ssamp_correction_sptr self, int which) -> float
        pc_input_buffers_full(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(ssamp_correction_sptr self, int which) -> float
        pc_input_buffers_full_avg(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(ssamp_correction_sptr self, int which) -> float
        pc_input_buffers_full_var(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(ssamp_correction_sptr self, int which) -> float
        pc_output_buffers_full(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(ssamp_correction_sptr self, int which) -> float
        pc_output_buffers_full_avg(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(ssamp_correction_sptr self, int which) -> float
        pc_output_buffers_full_var(ssamp_correction_sptr self) -> pmt_vector_float
        """
        return _tempest_swig.ssamp_correction_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(ssamp_correction_sptr self) -> float"""
        return _tempest_swig.ssamp_correction_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(ssamp_correction_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _tempest_swig.ssamp_correction_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(ssamp_correction_sptr self)"""
        return _tempest_swig.ssamp_correction_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(ssamp_correction_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _tempest_swig.ssamp_correction_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(ssamp_correction_sptr self) -> int"""
        return _tempest_swig.ssamp_correction_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(ssamp_correction_sptr self) -> int"""
        return _tempest_swig.ssamp_correction_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(ssamp_correction_sptr self, int priority) -> int"""
        return _tempest_swig.ssamp_correction_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(ssamp_correction_sptr self) -> std::string"""
        return _tempest_swig.ssamp_correction_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(ssamp_correction_sptr self) -> std::string"""
        return _tempest_swig.ssamp_correction_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(ssamp_correction_sptr self) -> io_signature_sptr"""
        return _tempest_swig.ssamp_correction_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(ssamp_correction_sptr self) -> io_signature_sptr"""
        return _tempest_swig.ssamp_correction_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(ssamp_correction_sptr self) -> long"""
        return _tempest_swig.ssamp_correction_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(ssamp_correction_sptr self) -> basic_block_sptr"""
        return _tempest_swig.ssamp_correction_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(ssamp_correction_sptr self, int ninputs, int noutputs) -> bool"""
        return _tempest_swig.ssamp_correction_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(ssamp_correction_sptr self) -> std::string"""
        return _tempest_swig.ssamp_correction_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(ssamp_correction_sptr self, std::string name)"""
        return _tempest_swig.ssamp_correction_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(ssamp_correction_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _tempest_swig.ssamp_correction_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(ssamp_correction_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.ssamp_correction_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(ssamp_correction_sptr self) -> swig_pmt_ptr"""
        return _tempest_swig.ssamp_correction_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(ssamp_correction_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _tempest_swig.ssamp_correction_sptr_message_subscribers(self, which_port)

# Register ssamp_correction_sptr in _tempest_swig:
_tempest_swig.ssamp_correction_sptr_swigregister(ssamp_correction_sptr)


ssamp_correction_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ssamp_correction = ssamp_correction.make;



