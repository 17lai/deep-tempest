{
  "task": ""  //  root/task/images-models-options
 
  , "path": {
    "root": "pnp_optuna_hparams_output_dir" // Change for output directory
    , "pretrained_netG": "denoising/drunet-gray/28_G.pth"    // path of pretrained model, if model from scratch type: null
  }
  , "n_channels": 1  // broadcast to "datasets", 1 for grayscale, 3 for color
  , "gpu_ids": [0]

  , "plugnplay":{
     "image_path": "pnp_images/square_800x1000.png" // Path to image to load (needed)
    ,"init_image_path": ""// Path to initialization image (optional)
                          // If not using init use "" or null
    ,"lambda": 0
    ,"noise_sigma": 2   // Observation stdev noise. Default 10
    ,"sigma1": 50       // Prior's first sigma
    ,"sigma2": 10       // Prior's last sigma, smaller than sigma1
    ,"lr_data_term": 1e-4   // Default 1e-4
    ,"iters_data_term": 20  // Default 30
    ,"iters_pnp": 1
    }
  , "optuna":{
     "n_trials": 1
    ,"metric": "CER"   // "edgeJaccard" | "PSNR" | "SSIM" | "CER" | "MSE"
    
  }

  , "datasets": {
    "train": {
      "name": "train_dataset"           // just name
      , "dataset_type": "ffdnet"         // "dncnn" | "dnpatch" for dncnn,  | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch"
      , "dataroot_H": "trainsets/train_pnp" // path of H training dataset
      , "dataroot_L": "trainsets/simulations" // path of L training dataset, if using noisy H type: null
    }
    , "test": {
      "name": "test_dataset"            // just name
      , "dataset_type": "ffdnet"         // "dncnn" | "dnpatch" for dncnn,  | "fdncnn" | "ffdnet" | "sr" | "srmd" | "dpsr" | "plain" | "plainpatch"
      , "dataroot_H": "valsets/ground-truth"  // path of H testing dataset
      , "dataroot_L": "valsets/simulations"   // path of L testing dataset
    }
  }

  // Unused settings below
  , "netG": {
    "net_type": "drunet" // "dncnn" | "fdncnn" | "ffdnet" | "srmd" | "dpsr" | "srresnet0" |  "srresnet1" | "rrdbnet" 
    , "in_nc": 1        // input channel number
    , "out_nc": 1       // ouput channel number
    , "nc": [64, 128, 256, 512]          // 64 for "dncnn"
    , "nb": 4          // 17 for "dncnn", 20 for dncnn3, 16 for "srresnet"
    , "gc": 32          // unused
    , "ng": 2           // unused
    , "reduction": 16  // unused
    , "act_mode": "R"  // "BR" for BN+ReLU | "R" for ReLU
    , "upsample_mode": "convtranspose"  // "pixelshuffle" | "convtranspose" | "upconv"
    , "downsample_mode": "strideconv"   // "strideconv" | "avgpool" | "maxpool"
    , "bias": false//
    , "init_type": "orthogonal"         // "orthogonal" | "normal" | "uniform" | "xavier_normal" | "xavier_uniform" | "kaiming_normal" | "kaiming_uniform"
    , "init_bn_type": "uniform"         // "uniform" | "constant"
    , "init_gain": 0.2
  }
  , "train": {
    "epochs": 1000                      // number of epochs to train
  , "G_lossfn_type": "tv"               // "tv" | "l1" | "l2sum" | "l2" | "ssim" 
  , "G_lossfn_weight": 1.0            // default
  , "G_tvloss_weight": 1.0            // total variation weight
  , "G_tvloss_reduction": "mean"       // "sum" | "mean": Reduction for TV loss 

  , "G_optimizer_type": "adam"        // fixed, adam is enough
  , "G_optimizer_lr": 1e-4           // learning rate
  , "G_optimizer_clipgrad": null      // unused

  , "G_scheduler_type": "MultiStepLR" // "MultiStepLR" is enough
  , "G_scheduler_milestones": [1600,  3200,  4800,  6400,  8000,  9600, 11200, 12800, 14400]
  , "G_scheduler_gamma": 0.1  //

  , "G_regularizer_orthstep": null    // unused
  , "G_regularizer_clipstep": null    // unused
  
  // iteration (batch step) checkpoints
  , "checkpoint_test": 1600           // for testing
  , "checkpoint_save": 3999           // for saving model
  , "checkpoint_print": 16           // for print
}

}
